
&НаКлиенте
Процедура Расш1_ЗУПЗаполнитьПосле(Команда)
	
	Если ПроверкаНастроекСервиса() Тогда 
		ТекстПредупреждения = "Не заполнены данные по настройкам внешнего сервиса!";
		ОтобразитьПредупреждение(ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	Если ЗапросаПоФактическимДанным() Тогда
		ОповещениеИнформации = Новый ОписаниеОповещения("ИнформационноеСообщениеРезультат", ЭтотОбъект);
		ИнформационныйТекст = "Данные по фактическим данным заполнены!";
			ПоказатьОповещениеПользователя("Заполнение табеля!", ОповещениеИнформации, ИнформационныйТекст,
				БиблиотекаКартинок.ИнформацияНовости32Анимированная, СтатусОповещенияПользователя.Информация);
		Модифицированность = Истина;			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Расш1_ЗУППодразделениеОбработкаВыбораПосле(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ПроверкаНастройкаОтбора(ВыбранноеЗначение) Тогда 
		ЭтаФорма.Элементы.ДанныеОВремениЗаполнить.Доступность = Истина;
	Иначе 
		ЭтаФорма.Элементы.ДанныеОВремениЗаполнить.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверкаНастройкаОтбора(ВыбранноеЗначение)

	НайденныйСправочник = Справочники.Расш1_ЗУПСправочник1НастройкиОтбора.НайтиПоРеквизиту("ПодразделенияОрганизаций", ВыбранноеЗначение); 

	Если НайденныйСправочник.Пустая() Тогда 
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ИнформационноеСообщениеРезультат(Параметры) Экспорт 
КонецПроцедуры

&НаСервере
Функция ПроверкаНастроекСервиса()

	КлючОбъекта  = "ОбработкаНастройкаИнтеграции";
	КлючНастроек = "УРЛСервиса";
	
	ДанныеПонастройкамИнтеграции = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);
	Если ДанныеПонастройкамИнтеграции = Неопределено Тогда 
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервере
Функция ЗапросаПоФактическимДанным()
	
	//смещение по UTC time
	ДатаНачалаПериода = Объект.ДатаНачалаПериода + ((60 * 60)* 3);
	ДатаОкончанияПериода = Объект.ДатаОкончанияПериода + ((60 * 60)* 27); // конец дня + 3 часа

	СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("StartOfPeriod", ДатаНачалаПериода);
		СтруктураДанных.Вставить("EndOfPeriod", ДатаОкончанияПериода);
		СтруктураДанных.Вставить("ListOfEmployees", ПолучитьСписокТабельныхНомеров());
	РезультатЗапроса = ВебСервисы.ПередачаДанныхЗапросаПоФактическимДанным(СтруктураДанных);

	Если ЗначениеЗаполнено(РезультатЗапроса) Тогда
		ПроверкаИзаполнениеданныхВТабеле(РезультатЗапроса);
	Иначе 
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

//РабочиеЧасы
&НаСервере
Процедура ЗаполнитьРабочиеЧасы(ДанныеРЗРабочиеЧасы, ТЧДанныеОВремени, ТЧФизическиеЛица)

		//РабочиеЧасыПлюсНочные
		Для каждого СтрокаЗН Из ДанныеРЗРабочиеЧасы Цикл  // даты
				ТабНомер = СтрокаЗН.Получить("code"); // Таб номер (строка)
				ТекСотрудник = Справочники.Сотрудники.НайтиПоКоду(ТабНомер);

					Если ТекСотрудник.Ссылка.Пустая() Тогда
						//отправить в лог не найденные сотрудники по текущему таб номеру 
						Продолжить;
					КонецЕсли;

				ЧислоМесяца = СтрокаЗН.Получить("dateMonth"); // Число месяца
					Если ЧислоМесяца > 31 Тогда 
						Продолжить;
					КонецЕсли;

						//Добавление физического лица в ТЧ ФизическоеЛицо 
						ОтборФЛ = Новый Структура();
						ОтборФЛ.Вставить("ФизическоеЛицо", ТекСотрудник.ФизическоеЛицо); // отбор по сотруднику
						НайденноеЗначениеФЛ = Объект.ФизическиеЛица.НайтиСтроки(ОтборФЛ); 
							Если НайденноеЗначениеФЛ.Количество() = 0 Тогда
								НоваяСтрокаФЗ = ТЧФизическиеЛица.Добавить();
								НоваяСтрокаФЗ.ФизическоеЛицо = ТекСотрудник.ФизическоеЛицо;
							КонецЕсли;

				МассивЧасы = СтрокаЗН.Получить("activities"); // Массив получения рабочих часов
				Для каждого СтрокаЧасы Из МассивЧасы Цикл // Полетные часы
					// Структура часов
					ПолетноеВремяЧасы = СтрокаЧасы.Получить("flightTimeHours");
						Если ПолетноеВремяЧасы > 0 Тогда // Полетное Время Часы
							Для ЧислоМесяцаОтбор = 1 По 31 Цикл
								ОтборПолетноеВремя = Новый Структура();
								ОтборПолетноеВремя.Вставить("Сотрудник", ТекСотрудник); // отбор по сотруднику
								ОтборПолетноеВремя.Вставить("ВидВремени" + Строка(ЧислоМесяцаОтбор),
									Справочники.ВидыИспользованияРабочегоВремени.Явка);
										НайденноеЗначениеПолетноеВремя = Объект.ДанныеОВремени.НайтиСтроки(ОтборПолетноеВремя); 
									Если НайденноеЗначениеПолетноеВремя.Количество() > 0 Тогда
										Прервать;
									КонецЕсли;
							КонецЦикла;

								Если НайденноеЗначениеПолетноеВремя.Количество() = 0 Тогда
									НоваяСтрокаДОВ = ТЧДанныеОВремени.Добавить();
									НоваяСтрокаДОВ.Сотрудник = ТекСотрудник;
									//Инициализировать данные по ТЧ данным о времени 
								    ИнициализацияДанныхТЧ(НоваяСтрокаДОВ);
								Иначе 
									НоваяСтрокаДОВ = НайденноеЗначениеПолетноеВремя[0];
								КонецЕсли;
							НоваяСтрокаДОВ["Часов" + Строка(ЧислоМесяца)] = ПолетноеВремяЧасы;  
							НоваяСтрокаДОВ["ВидВремени" + Строка(ЧислоМесяца)] = Справочники.ВидыИспользованияРабочегоВремени.Явка;
							НоваяСтрокаДОВ["ПереходящаяЧастьСмены" + Строка(ЧислоМесяца)] = Ложь;
						КонецЕсли;
				КонецЦикла;

				Для каждого СтрокаЧасы Из МассивЧасы Цикл
					// Структура по ночным часам
					НочныеЧасы = СтрокаЧасы.Получить("nightTimeHours");
						Если НочныеЧасы > 0 Тогда // ночные часы

							Для ЧислоМесяцаОтбор = 1 По 31 Цикл
								ОтборНочныеЧасы = Новый Структура();
								ОтборНочныеЧасы.Вставить("Сотрудник", ТекСотрудник); // отбор по сотруднику
								ОтборНочныеЧасы.Вставить("ВидВремени" + Строка(ЧислоМесяцаОтбор),
									Справочники.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы);
										НайденноеЗначениеОтборНочныеЧасы = Объект.ДанныеОВремени.НайтиСтроки(ОтборНочныеЧасы); 
									Если НайденноеЗначениеОтборНочныеЧасы.Количество() > 0 Тогда
										Прервать;
									КонецЕсли;
							КонецЦикла;

								Если НайденноеЗначениеОтборНочныеЧасы.Количество() = 0 Тогда
									НоваяСтрокаНЧ = ТЧДанныеОВремени.Добавить();
									НоваяСтрокаНЧ.Сотрудник = ТекСотрудник;
								Иначе 
									НоваяСтрокаНЧ = НайденноеЗначениеОтборНочныеЧасы[0];
								КонецЕсли;
							НоваяСтрокаНЧ["Часов" + Строка(ЧислоМесяца)] = НочныеЧасы; 
							НоваяСтрокаНЧ["ВидВремени" + Строка(ЧислоМесяца)] = Справочники.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы;
							НоваяСтрокаНЧ["ПереходящаяЧастьСмены" + Строка(ЧислоМесяца)] = Ложь;						
						КонецЕсли;
				КонецЦикла;
		КонецЦикла;

КонецПроцедуры

//Отпускные
&НаСервере
Процедура ЗаполнитьОтпускные(ДанныеРЗОтпуск, ТЧДанныеОВремени, ТЧФизическиеЛица) 

			//проверка на имеющиеся записи в ТЧ ДанныеОВремени
			Если Объект.ДанныеОВремени.Количество() > 0 Тогда 
				Для Каждого СтрокаОтпускников Из ДанныеРЗОтпуск Цикл 
					ТабНомерОтпускника = СтрокаОтпускников.Получить("code"); // Таб номер (строка)
					ТекСотрудникОтпускника = Справочники.Сотрудники.НайтиПоКоду(ТабНомерОтпускника);
						Если ТекСотрудникОтпускника.Ссылка.Пустая() Тогда
						//отправить в лог не найденные сотрудники по текущему таб номеру
							Продолжить;
						КонецЕсли;
					ДатаНачало = СтрокаОтпускников.Получить("issueDateStart") + " 0:0:0"; // Дата начало отпуска (строка)
					ДатаОкончание = СтрокаОтпускников.Получить("issueDateEnd") + " 0:0:0"; // Дата окончания отпуска (строка)
					ВидОтпуска = СтрокаОтпускников.Получить("typeVacation");
						ОтборСотрудник = Новый Структура();
						ОтборСотрудник.Вставить("Сотрудник", ТекСотрудникОтпускника); // отбор по сотруднику
						НайденноеЗначениеОтборОтпускник = Объект.ДанныеОВремени.НайтиСтроки(ОтборСотрудник); 
						Если НайденноеЗначениеОтборОтпускник.Количество() = 0 Тогда
								//Добавить новую запись при неимеющихся записей в ТЧ ДанныеОВремени по данному сотруднику
								 СтрокаОтпускник = ТЧДанныеОВремени.Добавить();
								 СтрокаОтпускник.Сотрудник = ТекСотрудникОтпускника;
								//Добавление физического лица в ТЧ ФизическоеЛицо 
								ОтборФЛОтпускника = Новый Структура();
								ОтборФЛОтпускника.Вставить("ФизическоеЛицо", ТекСотрудникОтпускника.ФизическоеЛицо); // отбор по сотруднику
								НайденноеЗначениеФЛ = Объект.ФизическиеЛица.НайтиСтроки(ОтборФЛОтпускника); 
									Если НайденноеЗначениеФЛ.Количество() = 0 Тогда
										НоваяСтрокаФЗОтпускника = ТЧФизическиеЛица.Добавить();
										НоваяСтрокаФЗОтпускника.ФизическоеЛицо = ТекСотрудникОтпускника.ФизическоеЛицо;
									КонецЕсли;
						 //Инициализировать данные по ТЧ данным о времени 
							ИнициализацияДанныхТЧ(СтрокаОтпускник);
							ЗаполнениеВидаОтпуска = ?(ВидОтпуска = 1, "Отпуск", "Отпуск без оплаты");
							ОбработкаДанныхСобытийПоПериодам(СтрокаОтпускник, ДатаНачало, ДатаОкончание, ЗаполнениеВидаОтпуска);
						Иначе 
						   //Заменить данные в найденной имеющейся строке по умолчанию на данные по отпуску отобранного сотрудника
							СтрокаОтпускник = НайденноеЗначениеОтборОтпускник[0];
							ЗаполнениеВидаОтпуска = ?(ВидОтпуска = 1, "Отпуск", "Отпуск без оплаты");
							ОбработкаДанныхСобытийПоПериодам(СтрокаОтпускник, ДатаНачало, ДатаОкончание, ЗаполнениеВидаОтпуска);
						КонецЕсли;
					КонецЦикла;
				Иначе
					//Добавить новую запись при неимеющихся ни одной из записей в ТЧ ДанныеОВремени
					Для Каждого СтрокаОтпускников Из ДанныеРЗОтпуск Цикл 
						ТабНомерОтпускника = СтрокаОтпускников.Получить("code"); // Таб номер (строка)
						ТекСотрудникОтпускника = Справочники.Сотрудники.НайтиПоКоду(ТабНомерОтпускника);
							Если ТекСотрудникОтпускника.Ссылка.Пустая() Тогда 
								Продолжить;
							КонецЕсли;
								//Добавление физического лица в ТЧ ФизическоеЛицо 
								ОтборФЛОтпускника = Новый Структура();
								ОтборФЛОтпускника.Вставить("ФизическоеЛицо", ТекСотрудникОтпускника.ФизическоеЛицо); // отбор по сотруднику
								НайденноеЗначениеФЛ = Объект.ФизическиеЛица.НайтиСтроки(ОтборФЛОтпускника); 
									Если НайденноеЗначениеФЛ.Количество() = 0 Тогда
										НоваяСтрокаФЗОтпускника = ТЧФизическиеЛица.Добавить();
										НоваяСтрокаФЗОтпускника.ФизическоеЛицо = ТекСотрудникОтпускника.ФизическоеЛицо;
									КонецЕсли;

							ДатаНачало = СтрокаОтпускников.Получить("issueDateStart") + " 0:0:0"; // Дата начало отпуска (строка)
							ДатаОкончание = СтрокаОтпускников.Получить("issueDateEnd") +" 0:0:0"; // Дата окончания отпуска (строка)
							ВидОтпуска = СтрокаОтпускников.Получить("typeVacation");

						ОтборСотрудник = Новый Структура();
						ОтборСотрудник.Вставить("Сотрудник", ТекСотрудникОтпускника); // отбор по сотруднику
						НайденноеЗначениеОтборОтпускник = Объект.ДанныеОВремени.НайтиСтроки(ОтборСотрудник); 
						Если НайденноеЗначениеОтборОтпускник.Количество() = 0 Тогда
						 СтрокаОтпускник = ТЧДанныеОВремени.Добавить();
						 СтрокаОтпускник.Сотрудник = ТекСотрудникОтпускника;
						 //Инициализировать данные по ТЧ данным о времени 
							ИнициализацияДанныхТЧ(СтрокаОтпускник);
							ЗаполнениеВидаОтпуска = ?(ВидОтпуска = 1, "Отпуск", "Отпуск без оплаты");
							ОбработкаДанныхСобытийПоПериодам(СтрокаОтпускник, ДатаНачало, ДатаОкончание, ЗаполнениеВидаОтпуска);	
							Иначе 
							   //Заменить данные в найденной имеющейся строке по умолчанию на данные по отпуску отобранного сотрудника
								СтрокаОтпускник = НайденноеЗначениеОтборОтпускник[0];
								ЗаполнениеВидаОтпуска = ?(ВидОтпуска = 1, "Отпуск", "Отпуск без оплаты");
								ОбработкаДанныхСобытийПоПериодам(СтрокаОтпускник, ДатаНачало, ДатаОкончание, ЗаполнениеВидаОтпуска);
							КонецЕсли;
						КонецЦикла;
			КонецЕсли;

КонецПроцедуры

//Больничные
&НаСервере
Процедура ЗаполнитьБольничные(ДанныеРЗБольничные, ТЧДанныеОВремени, ТЧФизическиеЛица)

			// проверка на имеющиеся записи в ТЧ ДанныеОВремени
			Если Объект.ДанныеОВремени.Количество() > 0 Тогда 
				Для Каждого СтрокаБольничных Из ДанныеРЗБольничные Цикл 
				ТабНомерБольничный = СтрокаБольничных.Получить("code"); // Таб номер (строка)
				ТекСотрудникБольничный = Справочники.Сотрудники.НайтиПоКоду(ТабНомерБольничный);
					Если ТекСотрудникБольничный.Ссылка.Пустая() Тогда 
						Продолжить;
					КонецЕсли;
					ДатаНачало = СтрокаБольничных.Получить("sickListDateStart") + " 0:0:0"; // Дата начало больничного (строка)
					ДатаОкончание = СтрокаБольничных.Получить("sickListDateEnd") + " 0:0:0"; // Дата окончания больничного (строка)
						ОтборБольничный = Новый Структура();
						ОтборБольничный.Вставить("Сотрудник", ТекСотрудникБольничный); // отбор по сотруднику
						НайденноеЗначениеОтборБольничный = Объект.ДанныеОВремени.НайтиСтроки(ОтборБольничный); 
						Если НайденноеЗначениеОтборБольничный.Количество() = 0 Тогда
							//Добавить новую запись при неимеющихся записей в ТЧ ДанныеОВремени по данному сотруднику
								 СтрокаБольничный = ТЧДанныеОВремени.Добавить();
								 СтрокаБольничный.Сотрудник = ТекСотрудникБольничный;
							//Добавление физического лица в ТЧ ФизическоеЛицо 
							ОтборФЛБольничный = Новый Структура();
							ОтборФЛБольничный.Вставить("ФизическоеЛицо", ТекСотрудникБольничный.ФизическоеЛицо); // отбор по сотруднику
							НайденноеЗначениеФЛБольничный = Объект.ФизическиеЛица.НайтиСтроки(ОтборФЛБольничный); 
								Если НайденноеЗначениеФЛБольничный.Количество() = 0 Тогда
									НоваяСтрокаФЗБольничный = ТЧФизическиеЛица.Добавить();
									НоваяСтрокаФЗБольничный.ФизическоеЛицо = ТекСотрудникБольничный.ФизическоеЛицо;
								КонецЕсли;
							//Инициализировать данные по ТЧ данным о времени 
							ИнициализацияДанныхТЧ(СтрокаБольничный);
							ОбработкаДанныхСобытийПоПериодам(СтрокаБольничный, ДатаНачало, ДатаОкончание, "Больничный");
						Иначе 
							//Заменить данные в найденной имеющейся строке по умолчанию на данные по больничному отобранного сотрудника
							СтрокаБольничный = НайденноеЗначениеОтборБольничный[0];
							ОбработкаДанныхСобытийПоПериодам(СтрокаБольничный, ДатаНачало, ДатаОкончание, "Больничный");
						КонецЕсли;
				КонецЦикла;
			Иначе 
				Для Каждого СтрокаБольничных Из ДанныеРЗБольничные Цикл 
					ТабНомерБольничный = СтрокаБольничных.Получить("code"); // Таб номер (строка)
					ТекСотрудникБольничный = Справочники.Сотрудники.НайтиПоКоду(ТабНомерБольничный);

					Если ТекСотрудникБольничный.Ссылка.Пустая() Тогда 
						Продолжить;
					КонецЕсли;
							//Добавление физического лица в ТЧ ФизическоеЛицо 
							ОтборФЛБольничный = Новый Структура();
							ОтборФЛБольничный.Вставить("ФизическоеЛицо", ТекСотрудникБольничный.ФизическоеЛицо); // отбор по сотруднику
							НайденноеЗначениеФЛБольничный = Объект.ФизическиеЛица.НайтиСтроки(ОтборФЛБольничный); 
								Если НайденноеЗначениеФЛБольничный.Количество() = 0 Тогда
									НоваяСтрокаФЗБольничный = ТЧФизическиеЛица.Добавить();
									НоваяСтрокаФЗБольничный.ФизическоеЛицо = ТекСотрудникБольничный.ФизическоеЛицо;
								КонецЕсли;
							ДатаНачало = СтрокаБольничных.Получить("sickListDateStart") + " 0:0:0"; // Дата начало больничного (строка)
							ДатаОкончание = СтрокаБольничных.Получить("sickListDateEnd") + " 0:0:0"; // Дата окончания больничного (строка)

						ОтборБольничный = Новый Структура();
						ОтборБольничный.Вставить("Сотрудник", ТекСотрудникБольничный); // отбор по сотруднику
						НайденноеЗначениеОтборБольничный = Объект.ДанныеОВремени.НайтиСтроки(ОтборБольничный); 
						Если НайденноеЗначениеОтборБольничный.Количество() = 0 Тогда
						//Добавить новую запись при неимеющихся записей в ТЧ ДанныеОВремени
						 СтрокаБольничный = ТЧДанныеОВремени.Добавить();
						 СтрокаБольничный.Сотрудник = ТекСотрудникБольничный;
							//Инициализировать данные по ТЧ данным о времени 
							ИнициализацияДанныхТЧ(СтрокаБольничный);
							ОбработкаДанныхСобытийПоПериодам(СтрокаБольничный, ДатаНачало, ДатаОкончание, "Больничный");
						Иначе 
						   //Заменить данные в найденной имеющейся строке по умолчанию на данные по больничному отобранного сотрудника
							СтрокаБольничный = НайденноеЗначениеОтборБольничный[0];
							ОбработкаДанныхСобытийПоПериодам(СтрокаБольничный, ДатаНачало, ДатаОкончание, "Больничный");
						КонецЕсли;
				КонецЦикла;
			КонецЕсли;

КонецПроцедуры

//Обучение
&НаСервере
Процедура ЗаполнитьОбучение(ДанныеРЗОбучение, ТЧДанныеОВремени, ТЧФизическиеЛица)

			// проверка на имеющиеся записи в ТЧ ДанныеОВремени
			Если Объект.ДанныеОВремени.Количество() > 0 Тогда 
				Для Каждого СтрокаОбучение Из ДанныеРЗОбучение Цикл 
				ТабНомерОбучение = СтрокаОбучение.Получить("code"); // Таб номер (строка)
				ТекСотрудникОбучение = Справочники.Сотрудники.НайтиПоКоду(ТабНомерОбучение);
					Если ТекСотрудникОбучение.Ссылка.Пустая() Тогда 
						Продолжить;
					КонецЕсли;
					ДатаНачало = СтрокаОбучение.Получить("TrainingDateStart") + " 0:0:0"; // Дата начало обучения (строка)
					ДатаОкончание = СтрокаОбучение.Получить("TrainingDateEnd") + " 0:0:0"; // Дата окончания обучения (строка)
					ЭтоЛетныйЭкипаж = СтрокаОбучение.Получить("thisPilotCrew"); // Да - Пилоты; Нет - Бортпроводники 
						ОтборОбучение = Новый Структура();
						ОтборОбучение.Вставить("Сотрудник", ТекСотрудникОбучение); // отбор по сотруднику
						НайденноеЗначениеОтборОбучение = Объект.ДанныеОВремени.НайтиСтроки(ОтборОбучение); 
						Если НайденноеЗначениеОтборОбучение.Количество() = 0 Тогда
							//Добавить новую запись при неимеющихся записей в ТЧ ДанныеОВремени по данному сотруднику
								 СтрокаОбучение = ТЧДанныеОВремени.Добавить();
								 СтрокаОбучение.Сотрудник = ТекСотрудникОбучение;
							//Добавление физического лица в ТЧ ФизическоеЛицо 
							ОтборФЛОбучение = Новый Структура();
							ОтборФЛОбучение.Вставить("ФизическоеЛицо", ТекСотрудникОбучение.ФизическоеЛицо); // отбор по сотруднику
							НайденноеЗначениеФЛОбучение = Объект.ФизическиеЛица.НайтиСтроки(ОтборФЛОбучение); 
								Если НайденноеЗначениеФЛОбучение.Количество() = 0 Тогда
									НоваяСтрокаФЗОбучение = ТЧФизическиеЛица.Добавить();
									НоваяСтрокаФЗОбучение.ФизическоеЛицо = ТекСотрудникОбучение.ФизическоеЛицо;
								КонецЕсли;
						 //Инициализировать данные по ТЧ данным о времени 
							ИнициализацияДанныхТЧ(СтрокаОбучение);
							ОбработкаДанныхСобытийПоПериодам(СтрокаОбучение, ДатаНачало, ДатаОкончание, "Обучение", ЭтоЛетныйЭкипаж);
						Иначе 
						   //Заменить данные в найденной имеющейся строке по умолчанию на данные по обучению отобранного сотрудника
							СтрокаОбучение = НайденноеЗначениеОтборОбучение[0];
							ОбработкаДанныхСобытийПоПериодам(СтрокаОбучение, ДатаНачало, ДатаОкончание, "Обучение", ЭтоЛетныйЭкипаж);
						КонецЕсли;
				КонецЦикла;
			Иначе 
				Для Каждого СтрокаОбучение Из ДанныеРЗОбучение Цикл 
					ТабНомерОбучение = СтрокаОбучение.Получить("code"); // Таб номер (строка)
					ТекСотрудникОбучение = Справочники.Сотрудники.НайтиПоКоду(ТабНомерОбучение);
					Если ТекСотрудникОбучение.Ссылка.Пустая() Тогда
						Продолжить;
					КонецЕсли;
						//Добавление физического лица в ТЧ ФизическоеЛицо 
						ОтборФЛОбучение = Новый Структура();
						ОтборФЛОбучение.Вставить("ФизическоеЛицо", ТекСотрудникОбучение.ФизическоеЛицо); // отбор по сотруднику
						НайденноеЗначениеФЛОбучение = Объект.ФизическиеЛица.НайтиСтроки(ОтборФЛОбучение); 
							Если НайденноеЗначениеФЛОбучение.Количество() = 0 Тогда
								НоваяСтрокаФЗОбучение = ТЧФизическиеЛица.Добавить();
								НоваяСтрокаФЗОбучение.ФизическоеЛицо = ТекСотрудникОбучение.ФизическоеЛицо;
							КонецЕсли;
						ДатаНачало = СтрокаОбучение.Получить("TrainingDateStart") + " 0:0:0"; // Дата начало обучения (строка)
						ДатаОкончание = СтрокаОбучение.Получить("TrainingDateEnd") + " 0:0:0"; // Дата окончания обучения (строка)
						ЭтоЛетныйЭкипаж = СтрокаОбучение.Получить("thisPilotCrew"); // Да - Пилоты; Нет - Бортпроводники 
					//Добавить новую запись при неимеющихся записей в ТЧ ДанныеОВремени
					 СтрокаОбучение = ТЧДанныеОВремени.Добавить();
					 СтрокаОбучение.Сотрудник = ТекСотрудникОбучение;
					 //Инициализировать данные по ТЧ данным о времени 
						ИнициализацияДанныхТЧ(СтрокаОбучение);
						ОбработкаДанныхСобытийПоПериодам(СтрокаОбучение, ДатаНачало, ДатаОкончание, "Обучение", ЭтоЛетныйЭкипаж);
				КонецЦикла;
			КонецЕсли;

КонецПроцедуры

//a 1-14 дней
//b 15-30 (31) дней
//
//1 текущий месяц
//2 начало события в предыдущем месяце
//3 окончание события в следующем месяце
//4 начало события в прошедшем месяце и окончание в следующем
&НаСервере
Процедура ОбработкаДанныхСобытийПоПериодам(СтрокаТЧ, ДатаНачало, ДатаОкончание, ВидСобытия, ЛетныйЭкипаж = Ложь)

		ПредЧас = 0; // предварительное получение данных о времени
	// определение Вида Времени
	Если ВидСобытия = "Отпуск" Тогда
		ВидВремя = Справочники.ВидыИспользованияРабочегоВремени.ОсновнойОтпуск;
		ПредЧас = 0;
	ИначеЕсли ВидСобытия = "Отпуск без оплаты" Тогда 
		ВидВремя = Справочники.ВидыИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя;
		ПредЧас = 0;
	ИначеЕсли ВидСобытия = "Больничный" Тогда 
		ВидВремя = Справочники.ВидыИспользованияРабочегоВремени.Болезнь;
		ПредЧас = 0;
	ИначеЕсли ВидСобытия = "Обучение" Тогда 
		ВидВремя = Справочники.ВидыИспользованияРабочегоВремени.Явка;
		ПредЧас = ?(ЛетныйЭкипаж = Истина, (7 + ((20 % 60) / 60)), 8);
	КонецЕсли;

		// если событие началось и закочнилось в текущем периоде  
		Если Дата(ДатаНачало) >= Объект.ДатаНачалаПериода И
					Дата(ДатаОкончание) <= Объект.ДатаОкончанияПериода Тогда 
			Для ДатаПериода = День(Дата(ДатаНачало))  По День(Дата(ДатаОкончание)) Цикл 
				СтрокаТЧ["Часов" + Строка(ДатаПериода)] = ПредЧас;  
				СтрокаТЧ["ВидВремени" + Строка(ДатаПериода)] = ВидВремя;
			КонецЦикла; 
		КонецЕсли;

		// если событие началось в текущем периоде и продолжается в следующем 
		Если Дата(ДатаНачало) >= Объект.ДатаНачалаПериода И 
					Дата(ДатаОкончание) > Объект.ДатаОкончанияПериода Тогда 
						Для ДатаПериода = День(Дата(ДатаНачало))  По
									 День(Объект.ДатаОкончанияПериода) Цикл 
							СтрокаТЧ["Часов" + Строка(ДатаПериода)] = ПредЧас;  
							СтрокаТЧ["ВидВремени" + Строка(ДатаПериода)] = ВидВремя;
						КонецЦикла;
		КонецЕсли;	

		// если событие началось в прошлом периоде и закончилось или продолжается в текущем
		Если Дата(ДатаНачало) < Объект.ДатаНачалаПериода И 
					Дата(ДатаОкончание) <= Объект.ДатаОкончанияПериода Тогда
					Для ДатаПериода = День(Объект.ДатаНачалаПериода) По
								День(ДатаОкончание) Цикл 
									СтрокаТЧ["Часов" + Строка(ДатаПериода)] = ПредЧас;  
									СтрокаТЧ["ВидВремени" + Строка(ДатаПериода)] = ВидВремя;
			КонецЦикла;		
		КонецЕсли;

		// если событие началось в прошлом периоде и закончилось в будущем
		Если Дата(ДатаНачало) < Объект.ДатаНачалаПериода И 
					Дата(ДатаОкончание) > Объект.ДатаОкончанияПериода Тогда
					Для ДатаПериода = День(Объект.ДатаНачалаПериода) По
								День(Объект.ДатаОкончанияПериода) Цикл 
									СтрокаТЧ["Часов" + Строка(ДатаПериода)] = ПредЧас;  
									СтрокаТЧ["ВидВремени" + Строка(ДатаПериода)] = ВидВремя;
			КонецЦикла;		
		КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИнициализацияДанныхТЧ(ТекСтрокаТЧ)

	 //Инициализировать данные по ТЧ данным о времени 
	 Для ЧислоМесяцаИнициализация = День(Объект.ДатаНачалаПериода) По 
					День(Объект.ДатаОкончанияПериода) Цикл
		 ТекСтрокаТЧ["Часов" + Строка(ЧислоМесяцаИнициализация)] = 0;  
		 ТекСтрокаТЧ["ВидВремени" + Строка(ЧислоМесяцаИнициализация)] = 
			Справочники.ВидыИспользованияРабочегоВремени.ВыходныеДни;
		 ТекСтрокаТЧ["ПереходящаяЧастьСмены" + Строка(ЧислоМесяцаИнициализация)] = Ложь;
	 КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура  ПроверкаИзаполнениеданныхВТабеле(РезультатЗапроса)

	ТЧДанныеОВремени = Объект.ДанныеОВремени;
	ТЧФизическиеЛица = Объект.ФизическиеЛица;

	Если Объект.ДанныеОВремени.Количество() > 0 Тогда 
		Объект.ДанныеОВремени.Очистить();
	КонецЕсли;
	
	Если Объект.ФизическиеЛица.Количество() > 0 Тогда 
		Объект.ФизическиеЛица.Очистить();
	КонецЕсли;

		//структуры данных по видам событий экипажа полученные из результата запроса
		ДанныеРЗРабочиеЧасы = РезультатЗапроса.Получить("employees"); 
		ДанныеРЗОтпуск = РезультатЗапроса.Получить("holiday");
		ДанныеРЗБольничные = РезультатЗапроса.Получить("sickList");
		ДанныеРЗОбучение = РезультатЗапроса.Получить("training");

			//РабочиеЧасыПлюсНочные
			Если ЗначениеЗаполнено(ДанныеРЗРабочиеЧасы) И ДанныеРЗРабочиеЧасы.Количество() > 0 Тогда
				ЗаполнитьРабочиеЧасы(ДанныеРЗРабочиеЧасы, ТЧДанныеОВремени, ТЧФизическиеЛица);
			КонецЕсли;

			// Отпуска
			Если ЗначениеЗаполнено(ДанныеРЗОтпуск) И ДанныеРЗОтпуск.Количество() > 0 Тогда
				ЗаполнитьОтпускные(ДанныеРЗОтпуск, ТЧДанныеОВремени, ТЧФизическиеЛица);
			КонецЕсли;

		 	// Больничные листы
			Если ЗначениеЗаполнено(ДанныеРЗБольничные) И ДанныеРЗБольничные.Количество() > 0 Тогда
				ЗаполнитьБольничные(ДанныеРЗБольничные, ТЧДанныеОВремени, ТЧФизическиеЛица);
			КонецЕсли;

		 	// Обучение
			Если ЗначениеЗаполнено(ДанныеРЗОбучение) И ДанныеРЗОбучение.Количество() > 0 Тогда
				ЗаполнитьОбучение(ДанныеРЗОбучение, ТЧДанныеОВремени, ТЧФизическиеЛица);
			КонецЕсли;

	Объект.ДанныеОВремени.Сортировать("Сотрудник");
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	//ПриПолученииДанныхНаСервере(ДокументОбъект);

КонецПроцедуры

&НаСервере
Функция ПолучитьСписокТабельныхНомеров()

	МассивДанных =Новый Массив;	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			| ПриемНаРаботу.Сотрудник.Код КАК ТабНомер,
			| ПриемНаРаботу.Сотрудник КАК Сотрудник
			| ИЗ
			| Документ.ПриемНаРаботу КАК ПриемНаРаботу
			| ГДЕ
			|	ПриемНаРаботу.Организация = &Организация
			|	И ПриемНаРаботу.Подразделение = &Подразделение
			|	И ПриемНаРаботу.Проведен
			|	И ПриемНаРаботу.ДатаПриема <= &ДатаПриема";
		Запрос.УстановитьПараметр("Организация",Объект.Организация);
		Запрос.УстановитьПараметр("Подразделение",Объект.Подразделение);
		Запрос.УстановитьПараметр("ДатаПриема", Объект.ДатаНачалаПериода);

		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивДанных.Добавить(ВыборкаДетальныеЗаписи.ТабНомер);
	КонецЦикла;

	Возврат МассивДанных;
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьПредупреждение(ТекстПредупреждения)
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
	ПоказатьПредупреждение(Оповещение, ТекстПредупреждения, 0, 	"Внимание!");
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПредупреждение(Параметры) Экспорт
КонецПроцедуры

&НаКлиенте
Процедура Расш1_ЗУПКомандаПечатиТ13После(Команда)
	ОткрытьФорму("Отчет.УнифицированнаяФормаТ13.ФормаОбъекта");
КонецПроцедуры

&НаКлиенте
Процедура Расш1_ЗУППослеЗаписиПосле(ПараметрыЗаписи)
	Если Объект.Проведен Тогда 
		ЭтаФорма.Элементы.КомандаПечатиТ13.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Расш1_ЗУППриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	Если Объект.Проведен Тогда 
		ЭтаФорма.Элементы.КомандаПечатиТ13.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры
